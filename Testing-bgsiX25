-- X25 EGG TELEPORT CLIENT (NGROK FIXED VERSION)
local config = {
    WS_URL = "wss://0044-2a00-23c7-148c-9801-e038-fe46-ec5-f21e.ngrok-free.app/ws", -- MUST use wss://
    PLACE_ID = 85896571713843,
    SelectedEgg = "spikey-egg",
    Cooldown = 30,
    Headers = {
        ["ngrok-skip-browser-warning"] = "true",  -- Critical for ngrok
        ["User-Agent"] = "Roblox"                 -- Bypass security
    }
}

-- Services
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- Connection variables
local socket
local lastTeleportTime = 0

local function connectWebSocket()
    -- Force wss:// protocol if missing
    local url = config.WS_URL
    if not url:find("^wss://") and not url:find("^ws://") then
        url = "wss://"..url
    end

    -- Implementation-specific connection
    local success, newSocket = pcall(function()
        if syn and syn.websocket then
            return syn.websocket.connect(url, config.Headers)
        elseif WebSocket then
            -- Workaround for standard WebSocket
            local ws = WebSocket.connect(url)
            if config.Headers then
                for k,v in pairs(config.Headers) do
                    pcall(function() ws.sock:addheader(k, v) end)
                end
            end
            return ws
        else
            error("No WebSocket library available")
        end
    end)

    if not success then
        warn("Connection failed:", newSocket)
        return nil
    end

    -- Connection handlers
    newSocket.OnOpen:Connect(function()
        print("✅ Connected to:", url)
        newSocket:Send(HttpService:JSONEncode({
            type = "auth",
            player_name = Players.LocalPlayer.Name,
            egg_type = config.SelectedEgg
        }))
    end)

    newSocket.OnMessage:Connect(function(message)
        local data = pcall(HttpService.JSONDecode, HttpService, message)
        if data and data.job_id then
            if os.time() - lastTeleportTime < config.Cooldown then
                print("⏳ Cooldown active")
                return
            end
            
            lastTeleportTime = os.time()
            TeleportService:TeleportToPlaceInstance(config.PLACE_ID, data.job_id)
        end
    end)

    newSocket.OnClose:Connect(function()
        warn("❌ Connection closed - Reconnecting in 5s...")
        task.wait(5)
        connectWebSocket()
    end)

    return newSocket
end

-- Start connection
socket = connectWebSocket()

-- Keep alive
while true do
    if socket and (socket.Connected or (socket.sock and socket.sock.Connected)) then
        pcall(function() socket:Send('{"type":"ping"}') end)
    else
        socket = connectWebSocket()
    end
    task.wait(25)
end
