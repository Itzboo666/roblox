-- X25 EGG TELEPORT CLIENT (COMPLETE SOLUTION)


local WS_URL = "ws://localhost:8000/ws"  -- Change to your server URL
local PLACE_ID = 85896571713843          -- Your game's place ID
local COOLDOWN = 30                      -- Seconds between teleport attempts
local TIMEOUT = 15                       -- Seconds to wait for success

-- All available egg types
local EGG_TYPES = {
    -- World 1 Eggs
    "common-egg", -- 1
    "spotted-egg", -- 2
    "iceshard-egg", -- 3
    "spikey-egg", -- 4
    "magma-egg", -- 5
    "crystal-egg", -- 6
    "lunar-egg", -- 7
    "void-egg", -- 8
    "hell-egg", -- 9
    "rainbow-egg", -- 10
    "nightmare-egg", -- 11
    -- World 2 Eggs
    "showman-egg", -- 12
    "mining-egg", -- 13
    "cyber-egg", -- 14
    "underworld-egg", -- 15
    "bounty-egg" -- 16
}

-- Configuration (change these)
local SELECTED_EGG = EGG_TYPES[4]  -- Default: spikey-egg (change index as needed)

-- Services
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

-- Connection variables
local socket
local lastTeleportTime = 0
local activeJob = nil
local connectionAttempts = 0
local MAX_ATTEMPTS = 3

-- WebSocket connection function
local function connectWebSocket()
    -- Try different WebSocket implementations
    local success, newSocket = pcall(function()
        if syn and syn.websocket then
            return syn.websocket.connect(WS_URL)
        elseif WebSocket then
            return WebSocket.connect(WS_URL)
        else
            error("No WebSocket library found")
        end
    end)

    if not success then
        warn("Connection failed:", newSocket)
        return nil
    end

    -- Connection handlers
    newSocket.OnOpen:Connect(function()
        print("✅ Connected to WebSocket server | Tracking: "..SELECTED_EGG)
        connectionAttempts = 0
        
        -- Send authentication
        newSocket:Send(HttpService:JSONEncode({
            type = "auth",
            player_name = Players.LocalPlayer.Name,
            roblox_id = tostring(Players.LocalPlayer.UserId),
            egg_type = SELECTED_EGG
        }))
    end)

    newSocket.OnMessage:Connect(function(message)
        print("📦 Received:", message)
        local success, data = pcall(HttpService.JSONDecode, HttpService, message)
        if not success or data.type ~= "teleport" or data.egg_type ~= SELECTED_EGG then 
            return 
        end

        -- Cooldown check
        if os.time() - lastTeleportTime < COOLDOWN then
            print(("⏳ Cooldown: %ds remaining"):format(
                COOLDOWN - (os.time() - lastTeleportTime)))
            return
        end

        -- Execute teleport
        activeJob = data.job_id
        lastTeleportTime = os.time()
        
        local teleportSuccess, err = pcall(function()
            TeleportService:TeleportToPlaceInstance(PLACE_ID, activeJob)
        end)

        if not teleportSuccess then
            warn("Teleport failed:", err)
            activeJob = nil
        else
            -- Fallback success detection
            delay(TIMEOUT, function()
                if activeJob then
                    print("✅ Teleport successful | Egg: "..SELECTED_EGG)
                    activeJob = nil
                end
            end)
        end
    end)

    newSocket.OnClose:Connect(function()
        warn("❌ Connection closed")
        -- Automatic reconnection
        if connectionAttempts < MAX_ATTEMPTS then
            connectionAttempts += 1
            task.wait(5)
            socket = connectWebSocket()
        end
    end)

    return newSocket
end

-- Error handling
TeleportService.TeleportInitFailed:Connect(function(_, result)
    if activeJob then
        warn("❌ Teleport failed:", result)
        activeJob = nil
    end
end)

-- Egg selection UI (simple console print)
print("\n=== AVAILABLE EGG TYPES ===")
for i, egg in pairs(EGG_TYPES) do
    print(string.format("%2d: %s", i, egg))
end
print("Currently tracking: "..SELECTED_EGG.."\n")

-- Main execution
local function main()
    socket = connectWebSocket()
    
    -- Heartbeat system
    while true do
        if socket and socket.Connected then
            -- Send heartbeat every 25 seconds
            pcall(function()
                socket:Send(HttpService:JSONEncode({
                    type = "heartbeat",
                    timestamp = os.time(),
                    egg_type = SELECTED_EGG
                }))
            end)
        else
            -- Reconnect if needed
            socket = connectWebSocket()
        end
        task.wait(25)
    end
end

-- Start the system
local success, err = pcall(main)
if not success then
    warn("Fatal error:", err)
end
