--[[
    Simple Roblox Task Name Extractor
    Only gets task names without percentages or numbers
    Extra error-proof version
--]]

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Debug function to visualize GUI structure
local function printGuiStructure(parent, indent)
    indent = indent or 0
    for _, child in ipairs(parent:GetChildren()) do
        print(string.rep("  ", indent) .. child.Name .. " (" .. child.ClassName .. ")")
        if #child:GetChildren() > 0 then
            printGuiStructure(child, indent + 1)
        end
    end
end

-- Safe wait for GUI function
local function waitForElement(path, timeout)
    timeout = timeout or 10
    local start = os.time()
    local current = playerGui
    
    for _, name in ipairs(path) do
        while true do
            local child = current:FindFirstChild(name)
            if child then
                current = child
                break
            end
            
            if os.time() - start > timeout then
                return nil
            end
            task.wait(0.5)
        end
    end
    
    return current
end

-- Main task extraction function
local function getTaskNames()
    -- First get the competitive GUI safely
    local competitive = waitForElement({"ScreenGui", "Competitive"})
    if not competitive then
        return {"Error: Competitive GUI not found"}
    end

    -- Debug: Uncomment this to see the GUI structure
    -- print("GUI Structure:")
    -- printGuiStructure(competitive)

    -- Try to find tasks button by looking for text
    local tasksButton
    for _, descendant in ipairs(competitive:GetDescendants()) do
        if (descendant:IsA("TextButton") or descendant:IsA("ImageButton")) and 
           (descendant.Name:lower():find("task") or (descendant.Text and descendant.Text:lower():find("task"))) then
            tasksButton = descendant
            break
        end
    end

    if not tasksButton then
        return {"Error: Tasks button not found"}
    end

    -- Try to click the button (multiple methods)
    local clicked = false
    local clickMethods = {
        function() tasksButton:FireEvent("MouseButton1Click") end,
        function() if tasksButton.Activated then tasksButton.Activated:Fire() end end,
        function() if tasksButton.MouseButton1Click then tasksButton.MouseButton1Click:Fire() end end
    }

    for _, method in ipairs(clickMethods) do
        if pcall(method) then
            clicked = true
            break
        end
    end

    if not clicked then
        return {"Error: Could not click tasks button"}
    end

    -- Wait for tasks to appear
    task.wait(1)

    -- Collect all text that looks like tasks
    local possibleTasks = {}
    for _, descendant in ipairs(competitive:GetDescendants()) do
        if descendant:IsA("TextLabel") or descendant:IsA("TextButton") then
            local text = descendant.Text
            if text and #text > 0 then
                -- Very simple task detection - looks for verbs
                if text:find("Hatch") or text:find("Blow") or text:find("Collect") or 
                   text:find("Complete") or text:find("Build") or text:find("Catch") then
                    -- Extract just the action + object (remove numbers and percentages)
                    local cleanTask = text:gsub("%d+[,%.]?%d*", ""):gsub("%%", ""):gsub("%s+", " "):gsub("^%s+", ""):gsub("%s+$", "")
                    table.insert(possibleTasks, cleanTask)
                end
            end
        end
    end

    if #possibleTasks == 0 then
        return {"Error: No tasks detected - may need to adjust patterns"}
    end

    -- Remove duplicates
    local uniqueTasks = {}
    for _, task in ipairs(possibleTasks) do
        if not table.find(uniqueTasks, task) then
            table.insert(uniqueTasks, task)
        end
    end

    return uniqueTasks
end

-- Run with full error protection
local function main()
    local success, tasks = pcall(getTaskNames)
    
    if success then
        print("\n=== TASK NAMES ===")
        for i, task in ipairs(tasks) do
            print(i .. ". " .. task)
        end
        print("=================")
        return tasks
    else
        print("Error:", tasks)
        return {"Error: " .. tostring(tasks)}
    end
end

-- Run the script
return main()
