-- Aura Egg Mass Rejoiner (No Webhooks, Auto-Restart)
wait(1.1)
repeat wait() until game:IsLoaded()

local PlaceID = 85896571713843 -- Fixed game ID
local queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)

-- ===== EGG CHECK =====
local function HasEgg()
    local Rendered = workspace:WaitForChild("Rendered", 2)
    if Rendered then
        local Rifts = Rendered:FindFirstChild("Rifts")
        if Rifts then
            return Rifts:FindFirstChild("aura-egg") or Rifts:FindFirstChild("man-egg")
        end
    end
    return nil
end

if HasEgg() then
    print("✅ Aura Egg Found! Stopping script.")
    return -- Exit if egg exists
end

-- ===== SERVER HOPPING SYSTEM (From your original script) =====
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour

-- Load server history
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end

-- Modified TPReturner (no webhooks)
function TPReturner()
    local Site
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/'..PlaceID..'/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/'..PlaceID..'/servers/Public?sortOrder=Asc&limit=100&cursor='..foundAnything))
    end

    if Site.nextPageCursor and Site.nextPageCursor ~= "null" then
        foundAnything = Site.nextPageCursor
    end

    for _,v in pairs(Site.data) do
        local ID = tostring(v.id)
        local Possible = true
        
        -- Skip if server is full or already visited
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _,Existing in pairs(AllIDs) do
                if ID == tostring(Existing) then
                    Possible = false
                    break
                end
            end

            if Possible then
                table.insert(AllIDs, ID)
                writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
                
                -- Queue script restart after teleport
                if queueteleport then
                    queueteleport([[
                        wait(1)
                        loadstring(game:HttpGet("https://raw.githubusercontent.com/Itzboo666/roblox/refs/heads/main/Aura-Finder"))()
                    ]])
                end
                
                game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, ID)
                wait(4) -- Give time for teleport
                return
            end
        end
    end
end

-- ===== MAIN LOOP =====
while wait(1) do
    if HasEgg() then
        print("✅ Egg found in current server!")
        break
    else
        pcall(TPReturner) -- Find and join new server
    end
end
