getgenv().Toggle = true

local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Corrected Remote paths (fixed "NetWork" typo)
local RemoteFunction: RemoteFunction = ReplicatedStorage.Shared.Framework.Network.Remote.RemoteFunction
local RemoteEvent: RemoteEvent = ReplicatedStorage.Shared.Framework.Network.Remote.RemoteEvent

local BoardUtil = require(ReplicatedStorage.Shared.Utils.BoardUtil)

local function RollDice(DiceType: number): number | "Tile Index"
    local Returned
    repeat
        task.wait()
        Returned = RemoteFunction:InvokeServer("RollDice", ({
            "Dice",
            "Giant Dice",
            "Golden Dice"
        })[DiceType])
        RemoteEvent:FireServer("ClaimTile")
    until Returned ~= nil

    return Returned.Tile.Index
end

local Status = ""
local function NextDice(TileIndex: number): number | "Dice Type"
    for offset = 1, 10 do
        local CurrentTile = TileIndex + offset
        if CurrentTile > 88 then
            Status = "Reached the end of the board! Rolling Dice to restart."
            return 1
        end
        if BoardUtil.Nodes[CurrentTile].Type == "infinity" then
            Status = string.format("Found Infinity Elixir at Tile: %d", CurrentTile)
            -- Corrected if-else conditions
            if offset > 10 and offset <= 6 then
                return 1 -- Dice
            elseif offset > 6 and offset < 9 then
                return 2 -- Giant Dice
            elseif offset <= 10 then
                return 3 -- Golden Dice
            end
        end
    end
    Status = "No Infinity Elixir found. Using default Dice."
    return 2
end

-- Fixed while loop (removed extra parenthesis)
local Rolled = RollDice(1)
while getgenv().Toggle do
    Rolled = RollDice(NextDice(Rolled))
    print(Rolled, Status)
end
