local webhook = getgenv().webhook
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)
local PlaceID = game.PlaceId

-- Improved data structure for server tracking
local actualHour = os.date("!*t").hour
local serverData = {
    Hour = actualHour,
    Servers = {}
}

-- Load server data with better error handling
local function loadServerData()
    local success, content = pcall(function()
        return HttpService:JSONDecode(readfile("NotSameServers.json"))
    end)
    
    if success and content and content.Hour == actualHour then
        serverData.Servers = content.Servers
    else
        pcall(function() delfile("NotSameServers.json") end)
        writefile("NotSameServers.json", HttpService:JSONEncode(serverData))
    end
end

loadServerData()

-- Optimized server fetcher with rate limiting
local function TPReturner()
    local cursor = ""
    local servers = {}
    
    repeat
        local success, result = pcall(function()
            return HttpService:JSONDecode(game:HttpGet(
                "https://games.roblox.com/v1/games/" .. PlaceID .. 
                "/servers/Public?sortOrder=Asc&limit=100" .. 
                (cursor ~= "" and "&cursor=" .. cursor or "")
            ))
        end)
        
        if not success then
            warn("Failed to fetch servers:", result)
            return
        end
        
        for _, server in ipairs(result.data) do
            if tonumber(server.maxPlayers) > tonumber(server.playing) then
                servers[#servers+1] = tostring(server.id)
            end
        end
        
        cursor = result.nextPageCursor or ""
    until cursor == "" or #servers > 0

    for _, id in ipairs(servers) do
        if not serverData.Servers[id] then
            serverData.Servers[id] = true
            pcall(function()
                writefile("NotSameServers.json", HttpService:JSONEncode(serverData))
            end)
            
            wait(3)  -- Added 3-second delay before teleport
            pcall(function()
                TeleportService:TeleportToPlaceInstance(PlaceID, id)
            end)
            return
        end
    end
end

local function Teleport()
    while true do
        local success, err = pcall(TPReturner)
        if not success then
            warn("Teleport error:", err)
        end
        wait(5)
    end
end


local function findEgg(riftsFolder)
    return riftsFolder:FindFirstChild("silly-egg", true) 
end

local request = syn and syn.request or http and http.request or fluxus and fluxus.request
local riftsFolder = workspace:WaitForChild("Rendered"):WaitForChild("Rifts")
local egg = findEgg(riftsFolder)  

if egg and webhook and request then
    local embed = {
        title = "   Silly egg detected!",
        description = "Time Left: " .. egg.Display.SurfaceGui.Timer.Text
    }
    
    pcall(function()
        request({
            Url = webhook,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode({embeds = {embed}})
        })
    end)
else
    if queueteleport then
        queueteleport('getgenv().webhook = "' .. webhook .. '"; loadstring(game:HttpGet"https://raw.githubusercontent.com/Itzboo666/roblox/main/Special-Egg-Finder")()')
    end
    Teleport()
end

-- Load external script with validation
local success, content = pcall(function()
    return game:HttpGet("https://raw.githubusercontent.com/IdiotHub/Scripts/main/BGSI/main.lua")
end)

if success then
    loadstring(content)()
else
    warn("Failed to load external script:", content)
end
