local HttpService = game:GetService("HttpService")
local request = (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request) or error("No HTTP request function found!")

-- Webhook verification
if not getgenv().webhook then
    error("Webhook URL not found in getgenv(). Please set getgenv().webhook first!")
end
local webhook = getgenv().webhook

-- Server tracking system
local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour

-- Server list file management
local function ManageServerFile()
    local success, data = pcall(function()
        return HttpService:JSONDecode(readfile("NotSameServers.json"))
    end)
    
    if success then
        AllIDs = data
    else
        table.insert(AllIDs, actualHour)
        pcall(function()
            writefile("NotSameServers.json", HttpService:JSONEncode({actualHour}))
        end)
    end
end

ManageServerFile()

-- Improved server fetcher with rate limiting
function TPReturner()
    local cursor = foundAnything ~= "" and foundAnything or nil
    local url = `https://games.roblox.com/v1/games/{PlaceID}/servers/Public?sortOrder=Asc&limit=100`..(cursor and `&cursor={cursor}` or "")
    
    local success, response = pcall(function()
        return HttpService:JSONDecode(game:HttpGet(url))
    end)
    
    if not success then return end
    
    foundAnything = response.nextPageCursor or ""
    
    for _, server in pairs(response.data) do
        if tonumber(server.playing) < tonumber(server.maxPlayers) then
            local serverId = tostring(server.id)
            
            if not table.find(AllIDs, serverId) then
                table.insert(AllIDs, serverId)
                
                pcall(function()
                    writefile("NotSameServers.json", HttpService:JSONEncode(AllIDs))
                    game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, serverId)
                end)
                
                task.wait(2) -- Reduced wait time
                return -- Exit after finding first available server
            end
        end
    end
end

-- Optimized teleport loop
function Teleport()
    while task.wait(0.5) do
        pcall(TPReturner)
        if foundAnything ~= "" then
            pcall(TPReturner)
        end
    end
end

-- Enhanced egg detection
local function FindEgg()
    local success, egg = pcall(function()
        return game:GetService("Workspace").Rendered.Rifts:FindFirstChild("silly-egg")
    end)
    return success and egg or nil
end

-- Webhook notification system
local function SendNotification(egg)
    local timerText = "unknown"
    if egg and egg.Display.SurfaceGui:FindFirstChild("Timer") then
        timerText = egg.Display.SurfaceGui.Timer.Text
    end
    
    local embed = {
        title = "ðŸš¨ Egg Detected! ðŸš¨",
        description = `**Aura egg found!**\nTime remaining: {timerText}`,
        color = 65280,
        fields = {
            {name = "Server ID", value = game.JobId, inline = true},
            {name = "Players", value = `{#game.Players:GetPlayers()}/{game.Players.MaxPlayers}`, inline = true}
        },
        timestamp = DateTime.now():ToIsoDate()
    }
    
    pcall(function()
        request({
            Url = webhook,
            Method = "POST",
            Headers = {["Content-Type"] = "application/json"},
            Body = HttpService:JSONEncode({embeds = {embed}})
        })
    end)
end

-- Main execution flow
local egg = FindEgg()

if egg then
    SendNotification(egg)
else
    Teleport()
end
