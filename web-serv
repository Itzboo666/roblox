-- CONFIG
local WS_URL = "wss://34d5-2a00-23c7-148c-9801-d03a-c5e6-1859-6c03.ngrok-free.app/ws"
local COOLDOWN = 8 * 60 -- 8 minutes

-- SERVICES
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

-- STATE
local lastTeleport = 0
local currentJob = nil

-- WEB SOCKET CONNECTION
local socket
local function connect()
    if WebSocket and WebSocket.connect then
        return WebSocket.connect(WS_URL)
    elseif syn and syn.websocket then
        return syn.websocket.connect(WS_URL)
    else
        warn("No supported WebSocket library found")
        return nil
    end
end

-- TELEPORT HANDLERS
TeleportService.TeleportInitFailed:Connect(function(_, result)
    if result == Enum.TeleportResult.GameFull then
        warn("Server full - resetting cooldown")
        currentJob = nil
        lastTeleport = 0
    end
end)

if TeleportService.TeleportCompleted then
    TeleportService.TeleportCompleted:Connect(function()
        warn("Teleport completed - starting cooldown")
        lastTeleport = os.time()
        currentJob = nil
    end)
end

-- MAIN LOOP
local function main()
    while true do
        local success, err = pcall(function()
            socket = connect()
            if not socket then return end
            
            print("Connected to WebSocket server")
            
            socket.OnMessage:Connect(function(msg)
                local data = HttpService:JSONDecode(msg)
                
                if not data.job_id or not data.command then
                    warn("Invalid message format")
                    return
                end
                
                if currentJob == data.job_id then
                    print("Already processed this job")
                    return
                end
                
                if os.time() - lastTeleport < COOLDOWN then
                    local remaining = COOLDOWN - (os.time() - lastTeleport)
                    warn(("Cooldown active: %d min %d sec left"):format(
                        math.floor(remaining/60), remaining%60))
                    return
                end
                
                local func, err = loadstring(data.command)
                if not func then
                    warn("Loadstring error:", err)
                    return
                end
                
                currentJob = data.job_id
                lastTeleport = os.time()
                
                local success, err = pcall(func)
                if not success then
                    warn("Execution error:", err)
                    currentJob = nil
                end
            end)
            
            socket.OnClose:Connect(function()
                warn("WebSocket disconnected - reconnecting in 5s")
                task.wait(5)
                main()
            end)
            
            while true do task.wait(1) end -- Keep connection alive
        end)
        
        if not success then
            warn("Connection error:", err)
            task.wait(5) -- Wait before reconnecting
        end
    end
end

-- Start the client
main()
