-- AUTO-EXEC TELEPORT CLIENT (FINAL OPTIMIZED VERSION)

-- CONFIGURATION
local WS_URL = "wss://8260-2a00-23c7-148c-9801-d03a-c5e6-1859-6c03.ngrok-free.app/ws"
local SUCCESS_COOLDOWN = 8 * 60  -- 8 minutes for successful teleports
local FAILURE_RETRY = 15         -- 15 seconds for failed attempts

-- SERVICES
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local os_time = os.time
local task_wait = task.wait

-- STATE
local lastSuccess = 0           -- Only updated on successful teleports
local currentJobId = nil
local cooldownEnd = 0
local failureCooldown = 0        -- Separate timer for failures
local isTeleporting = false

-- UNIVERSAL WEBSOCKET CONNECTION
local socket
if WebSocket and type(WebSocket.connect) == "function" then
    socket = WebSocket.connect(WS_URL)
elseif syn and syn.websocket then
    socket = syn.websocket.connect(WS_URL)
else
    warn("No supported WebSocket library found")
    return
end

-- TELEPORT FAILURE HANDLER (WORKS ON ALL EXECUTORS)
TeleportService.TeleportInitFailed:Connect(function(_, result)
    isTeleporting = false
    currentJobId = nil
    
    if result == Enum.TeleportResult.GameFull then
        failureCooldown = os_time() + FAILURE_RETRY
        warn("[Failure] Server full - retry in "..FAILURE_RETRY.."s")
    else
        failureCooldown = os_time() + 5  -- Short cooldown for other errors
        warn("[Failure] Teleport error: "..tostring(result))
    end
    printStatus()
end)

-- STATUS MONITOR
local function printStatus()
    local now = os_time()
    
    if now < failureCooldown then
        local remaining = failureCooldown - now
        print(("🛑 Retry available in %d:%02d (failed attempt)"):format(
            math.floor(remaining/60), remaining%60))
    elseif now < cooldownEnd then
        local remaining = cooldownEnd - now
        print(("⏳ Cooldown ends in %d:%02d (last success)"):format(
            math.floor(remaining/60), remaining%60))
    else
        print("✅ Ready for new teleports")
    end
end

-- AUTOMATIC STATUS UPDATES
spawn(function()
    while true do
        task_wait(30)
        printStatus()
        
        -- Emergency reset if stuck
        if isTeleporting and (os_time() - lastSuccess) > (SUCCESS_COOLDOWN + 60) then
            warn("🆘 Force resetting stuck teleport state")
            isTeleporting = false
            currentJobId = nil
        end
    end
end)

-- WEBSOCKET MESSAGE HANDLER
socket.OnMessage:Connect(function(msg)
    local now = os_time()
    
    -- Validate message format
    if type(msg) ~= "string" or #msg < 10 then
        warn("⚠️ Invalid message format")
        return
    end

    -- Check failure cooldown
    if now < failureCooldown then
        local remaining = failureCooldown - now
        warn(("⏸️ Skipping - recent failure (wait %ds)"):format(remaining))
        return
    end

    -- Check success cooldown
    if now < cooldownEnd then
        local remaining = cooldownEnd - now
        warn(("⏸️ Skipping - cooldown active (%d:%02d left)"):format(
            math.floor(remaining/60), remaining%60))
        return
    end

    -- Check duplicate job
    if currentJobId == msg then
        warn("⏸️ Skipping - already processing this job")
        return
    end

    -- Compile command
    local fn, err = loadstring(msg)
    if not fn then
        warn("⚠️ Load error: "..tostring(err))
        return
    end

    -- Start teleport
    print("🚀 Attempting teleport...")
    isTeleporting = true
    currentJobId = msg
    
    local success, err = pcall(fn)
    if not success then
        warn("⚠️ Execution error: "..tostring(err))
        isTeleporting = false
        currentJobId = nil
        failureCooldown = os_time() + 5
    else
        -- Success detection fallback
        spawn(function()
            task_wait(5)  -- Wait for teleport to complete
            
            if isTeleporting and currentJobId == msg then
                print("✨ Teleport success (assuming)")
                lastSuccess = os_time()
                cooldownEnd = lastSuccess + SUCCESS_COOLDOWN
                isTeleporting = false
                currentJobId = nil
                printStatus()
            end
        end)
    end
end)

-- WEBSOCKET ERROR HANDLING
if socket.OnClose then
    socket.OnClose:Connect(function()
        warn("🔌 WebSocket disconnected - reload script to reconnect")
    end)
end

print("⚡ Teleport client initialized!")
printStatus()
