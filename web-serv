-- AUTO‑EXEC TELEPORT SCRIPT (Ronix‑Compatible)

-- CONFIG: point at your ngrok WebSocket
local WS_URL       = "wss://e600-2a00-23c7-148c-9801-7438-a7df-f885-bf66.ngrok-free.app/ws"
local COOLDOWN_SEC = 8 * 60  -- seconds

-- SERVICES
local Players         = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local os_time         = os.time

-- STATE
local lastTeleport = 0
local inCooldown   = false

-- HELPER: safe Teleport
local function doTeleport(jobId)
    local ok, err = pcall(function()
        TeleportService:TeleportToPlaceInstance(tonumber(PLACE_ID), jobId)
    end)
    if not ok then
        warn("[Teleport] pcall failed:", err)
        return false
    end
    return true
end

-- HANDLE "SERVER FULL" to reset cooldown
TeleportService.TeleportInitFailed:Connect(function(player, result)
    if player == Players.LocalPlayer and result == Enum.TeleportResult.GameFull then
        warn("[Teleport] Server full, resetting")
        lastTeleport = 0
        inCooldown   = false
    end
end)

-- SETUP WEBSOCKET
local wsConn
do
    -- Ronix exposes WebSocket.connect
    assert(WebSocket and type(WebSocket.connect) == "function", "WebSocket.connect missing")
    local ok, sock = pcall(WebSocket.connect, WS_URL)
    assert(ok and sock, "[WebSocket] connect error: " .. tostring(sock))
    wsConn = sock
    print("[WebSocket] Connected to", WS_URL)
end

-- ON MESSAGE: raw JobID or Lua snippet
wsConn.OnMessage:Connect(function(msg)
    local now = os_time()
    if inCooldown or now - lastTeleport < COOLDOWN_SEC then
        local rem = COOLDOWN_SEC - (now - lastTeleport)
        warn("[Cooldown] skipping, time left:", rem)
        return
    end

    -- Try to extract JobID
    local jobId = msg:match("([0-9a-f%-]+)")
    if not jobId then
        warn("[WebSocket] no jobId in:", msg)
        return
    end

    print("[Teleport] Attempting JobID:", jobId)
    local success = doTeleport(jobId)
    if success then
        lastTeleport = now
        inCooldown   = true
        print("[Cooldown] engaged for", COOLDOWN_SEC, "sec")
    end
end)

-- OPTIONAL: log disconnect
if wsConn.OnClose then
    wsConn.OnClose:Connect(function(code, reason)
        warn("[WebSocket] closed:", code, reason)
    end)
end
