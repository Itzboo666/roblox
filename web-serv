-- CONFIGURATION
local WS_URL = "wss:///e600-2a00-23c7-148c-9801-7438-a7df-f885-bf66.ngrok-free.app/ws"
local PLACE_ID = 85896571713843
local COOLDOWN_TIME = 8 * 60  -- 8 minutes

-- SERVICES
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local os_time = os.time
local lastTeleport = 0
local isTeleporting = false

-- Executor Compatibility
local wsSupport = WebSocketService or (WebSocket and WebSocket.connect)
if not wsSupport then
    warn("WebSocket not supported in this executor.")
    return
end

-- Connect to WebSocket
local socket
local success, err = pcall(function()
    socket = (WebSocketService and WebSocketService:ConnectAsync(WS_URL)) or WebSocket.connect(WS_URL)
end)

if not success or not socket then
    warn("[WebSocket] Connection failed:", err)
    return
end

print("[WebSocket] Connected to server")

-- Handle teleport errors (e.g., experience full)
TeleportService.TeleportInitFailed:Connect(function(player, result, message)
    if player == localPlayer then
        warn("[Teleport Failed]", result, message)
        if result == Enum.TeleportResult.GameFull then
            lastTeleport = 0  -- cancel cooldown
            isTeleporting = false
        end
    end
end)

-- Listen for commands
socket.OnMessage:Connect(function(command)
    print("[WebSocket] Received:", command)
    if isTeleporting then
        warn("[Cooldown] Ignoring due to active cooldown.")
        return
    end

    if os_time() - lastTeleport < COOLDOWN_TIME then
        warn("[Cooldown] Still active. Skipping.")
        return
    end

    local func, err = loadstring(command)
    if not func then
        warn("[WebSocket] Invalid command:", err)
        return
    end

    lastTeleport = os_time()
    isTeleporting = true
    print("[Teleport] Executing command")
    func()
end)

-- Reconnect on close
socket.OnClose:Connect(function()
    warn("[WebSocket] Connection closed.")
end)
