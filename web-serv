-- TELEPORT CLIENT WITH VISIBLE COOLDOWN TRACKER
-- Save as "TeleportClient.lua" in your autoexec folder

-- CONFIG
local WS_URL = "wss://8260-2a00-23c7-148c-9801-d03a-c5e6-1859-6c03.ngrok-free.app/ws"
local COOLDOWN_FILE = "teleport_cooldown.txt"  -- Saved in executor's workspace
local COOLDOWN_MINS = 8  -- 8 minute cooldown

-- SERVICES
local TeleportService = game:GetService("TeleportService")
local os_time = os.time
local task_wait = task.wait

-- STATE
local cooldown_end = 0
local is_teleporting = false

-- FILE OPERATIONS (Works in all major executors)
local function save_cooldown()
    if writefile then
        local remaining = math.max(0, cooldown_end - os_time())
        writefile(COOLDOWN_FILE, ("%d"):format(remaining))
    end
end

local function load_cooldown()
    if readfile and isfile and isfile(COOLDOWN_FILE) then
        return os_time() + tonumber(readfile(COOLDOWN_FILE))
    end
    return 0
end

-- COOLDOWN DISPLAY
local function update_display()
    local remaining = cooldown_end - os_time()
    
    if remaining > 0 then
        local mins = math.floor(remaining / 60)
        local secs = math.floor(remaining % 60)
        print(("‚è≥ COOLDOWN: %d:%02d"):format(mins, secs))
        save_cooldown()  -- Update the file
    else
        print("‚úÖ READY FOR NEW JOBS")
        if isfile and isfile(COOLDOWN_FILE) then
            delfile(COOLDOWN_FILE)  -- Clear when done
        end
    end
end

-- WEBSOCKET CONNECTION (Universal)
local socket = (syn and syn.websocket or WebSocket).connect(WS_URL)

-- TELEPORT HANDLER
socket.OnMessage:Connect(function(command)
    -- Check if valid teleport command
    if not command:find("TeleportToPlaceInstance") then
        warn("INVALID COMMAND")
        return
    end
    
    -- Enforce cooldown
    if os_time() < cooldown_end then
        update_display()
        return
    end
    
    -- Execute teleport
    is_teleporting = true
    local fn = assert(loadstring(command))
    
    if pcall(fn) then
        -- Success - start cooldown
        cooldown_end = os_time() + (COOLDOWN_MINS * 60)
        save_cooldown()
        print("üöÄ TELEPORT SUCCESS - COOLDOWN STARTED")
    else
        warn("‚ö†Ô∏è TELEPORT FAILED")
    end
    
    is_teleporting = false
    update_display()
end)

-- AUTOMATIC UPDATER
spawn(function()
    cooldown_end = load_cooldown()  -- Load existing cooldown
    while true do
        update_display()
        task_wait(30)  -- Update every 30 seconds
    end
end)

print("Teleport Client Active!")
