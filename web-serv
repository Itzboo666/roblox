-- AUTO-EXEC TELEPORT CLIENT

-- CONFIGURATION: your ngrok tunnel WS URL
local WS_URL        = "wss://8260-2a00-23c7-148c-9801-d03a-c5e6-1859-6c03.ngrok-free.app/ws"
local COOLDOWN_SEC  = 8 * 60  -- 8 minutes

-- SERVICES
local Players         = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local os_time         = os.time
local task_wait       = task.wait

-- STATE
local lastTeleport = 0
local busy         = false
local currentJobId = nil
local cooldownEnd = 0

-- EXECUTOR WS SUPPORT
local connect
if WebSocket and type(WebSocket.connect) == "function" then
    connect = WebSocket.connect
elseif syn and syn.websocket then
    connect = syn.websocket.connect
else
    warn("[WebSocket] No supported API")
    return
end

-- CONNECT
local ok, socket = pcall(connect, WS_URL)
if not ok or not socket then
    warn("[WebSocket] Connection failed:", socket)
    return
end
print("[WebSocket] Connected to:", WS_URL)

-- UNIVERSAL TELEPORT SUCCESS DETECTION
local function onTeleportSuccess()
    print("[Teleport] Success - cooldown started")
    lastTeleport = os_time()
    cooldownEnd = lastTeleport + COOLDOWN_SEC
    busy = false
    currentJobId = nil
    printCooldown()
end

-- FAILURE HANDLER (WORKS ON ALL EXECUTORS)
TeleportService.TeleportInitFailed:Connect(function(_, result)
    if result == Enum.TeleportResult.GameFull then
        warn("[Teleport] Server full - resetting")
    end
    busy = false
    currentJobId = nil
    printCooldown()
end)

-- DEBUG TIMER
local function printCooldown()
    local remaining = cooldownEnd - os_time()
    if remaining > 0 then
        print(("[Cooldown] Next job in: %d:%02d"):format(
            math.floor(remaining/60), remaining%60))
    else
        print("[Cooldown] Ready for new jobs")
    end
end

-- COOLDOWN TRACKER
spawn(function()
    while true do
        task_wait(60)
        if os_time() < cooldownEnd then
            printCooldown()
        end
    end
end)

-- WATCHDOG
spawn(function()
    while true do
        task_wait(10)
        if busy and os_time() - lastTeleport > 30 then
            warn("[Watchdog] Timeout - resetting")
            busy = false
            currentJobId = nil
            printCooldown()
        end
    end
end)

-- MESSAGE HANDLER
socket.OnMessage:Connect(function(msg)
    print("[WebSocket] Received:", msg)
    local now = os_time()

    if currentJobId == msg then
        print("[Reject] Duplicate job")
        return
    end

    if now < cooldownEnd then
        local remaining = cooldownEnd - now
        warn(("[Reject] Cooldown: %d:%02d left"):format(
            math.floor(remaining/60), remaining%60))
        return
    end

    local fn, err = loadstring(msg)
    if not fn then
        warn("[Reject] Load error:", err)
        return
    end

    print("[Accept] Starting teleport")
    busy = true
    currentJobId = msg
    lastTeleport = now
    
    local success, err = pcall(fn)
    if success then
        -- Universal success detection
        spawn(function()
            task_wait(5)  -- Wait for teleport to complete
            onTeleportSuccess()
        end)
    else
        warn("[Error] Teleport failed:", err)
        busy = false
        currentJobId = nil
    end
end)

-- CLOSE HANDLER
if socket.OnClose then
    socket.OnClose:Connect(function(code, reason)
        warn(("Disconnected (%s): %s"):format(tostring(code), tostring(reason)))
    end)
end
