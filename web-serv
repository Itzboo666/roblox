-- CONFIGURATION
local WS_URL = "wss://34d5-2a00-23c7-148c-9801-d03a-c5e6-1859-6c03.ngrok-free.app/ws"
local COOLDOWN_TIME = 8 * 60  -- 8 minutes

-- SERVICES
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local localPlayer = Players.LocalPlayer
local os_time = os.time
local task_wait = task.wait

-- STATE
local lastTeleport = 0
local isTeleporting = false

-- EXECUTOR COMPATIBILITY
local wsSupport = WebSocketService or (WebSocket and WebSocket.connect)
if not wsSupport then
    warn("[WebSocket] Not supported by executor.")
    return
end

-- WEBSOCKET CONNECTION
local socket
local ok, result = pcall(function()
    return (WebSocketService and WebSocketService:ConnectAsync(WS_URL)) or WebSocket.connect(WS_URL)
end)

if not ok or not result then
    warn("[WebSocket] Connection failed:", result)
    return
end

socket = result
print("[WebSocket] Connected to", WS_URL)

-- TELEPORT FAIL HANDLER
TeleportService.TeleportInitFailed:Connect(function(player, result)
    if player == localPlayer and result == Enum.TeleportResult.GameFull then
        warn("[Teleport] Game full â€” cooldown cleared")
        lastTeleport = 0
        isTeleporting = false
    end
end)

-- TELEPORT SUCCESS HANDLER
if TeleportService.TeleportCompleted then
    TeleportService.TeleportCompleted:Connect(function()
        isTeleporting = false
        print("[Teleport] Completed successfully")
    end)
end

-- MESSAGE HANDLER
socket.OnMessage:Connect(function(message)
    local now = os_time()

    if isTeleporting then
        warn("[Cooldown] Already teleporting, skip")
        return
    end

    if now - lastTeleport < COOLDOWN_TIME then
        local remaining = COOLDOWN_TIME - (now - lastTeleport)
        warn("[Cooldown] Remaining:", remaining, "sec")
        return
    end

    local func, err = loadstring(message)
    if not func then
        warn("[WebSocket] Invalid Lua code:", err)
        return
    end

    print("[Teleport] Running command:", message)
    lastTeleport = now
    isTeleporting = true
    func()
end)

-- ON CLOSE
if socket.OnClose then
    socket.OnClose:Connect(function(code, reason)
        warn(("[WebSocket] Disconnected (%s): %s"):format(code, tostring(reason)))
    end)
end
