-- --- START OF Lua Script (Based on YOUR working script, with TeleportInitFailed ADDED) ---

local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local WEBSOCKET_SERVER_URL = "ws://192.168.1.210:8080" -- YOUR WORKING URL
local RECONNECT_DELAY = 7
local PING_INTERVAL = 25

local ws_client
local instanceIdFromServer = nil
local is_connected = false
local last_ping_sent = 0
local connection_attempt_active = false
local current_teleport_job_id = nil -- ADDED: To track the job ID for TeleportInitFailed

-- _try_attach_event function (FROM YOUR WORKING SCRIPT)
local function _try_attach_event(client, event_config, callback)
    local s_access, prop, s_connect_access, connect_fn, s_call, err_call
    s_access, prop = pcall(function() return client[event_config.PascalEvent] end)
    if s_access and prop and type(prop) == "table" then
        s_connect_access, connect_fn = pcall(function() return prop.Connect end)
        if s_connect_access and connect_fn and type(connect_fn) == "function" then
            s_call, err_call = pcall(function() prop:Connect(callback) end)
            if s_call then return true, event_config.PascalEvent .. ":Connect" end
        end
    end
    s_access, prop = pcall(function() return client[event_config.snake_event] end)
    if s_access and prop and type(prop) == "table" then
        s_connect_access, connect_fn = pcall(function() return prop.connect end)
        if s_connect_access and connect_fn and type(connect_fn) == "function" then
            s_call, err_call = pcall(function() prop:connect(callback) end)
            if s_call then return true, event_config.snake_event .. ":connect" end
        end
    end
    s_access, prop = pcall(function() return client.on end)
    if s_access and prop and type(prop) == "function" then
        s_call, err_call = pcall(function() client:on(event_config.emitter_event, callback) end)
        if s_call then return true, "client:on('" .. event_config.emitter_event .. "')" end
    end
    if event_config.direct_on_event then
        s_call, err_call = pcall(function() client[event_config.direct_on_event] = callback end)
        if s_call then 
            s_access, prop = pcall(function() return client[event_config.direct_on_event] end)
            if s_access and type(prop) == "function" then return true, "." .. event_config.direct_on_event end
        end
    end
    if event_config.direct_on_underscore_event then
        s_call, err_call = pcall(function() client[event_config.direct_on_underscore_event] = callback end)
        if s_call then
            s_access, prop = pcall(function() return client[event_config.direct_on_underscore_event] end)
            if s_access and type(prop) == "function" then return true, "." .. event_config.direct_on_underscore_event end
        end
    end
    return false
end

-- _try_send_message function (FROM YOUR WORKING SCRIPT)
local function _try_send_message(client, data_string)
    local success, err_msg, method_name; method_name = "client:send()"; success, err_msg = pcall(function() client:send(data_string) end); if success then return true, method_name end; method_name = "client.send()"; success, err_msg = pcall(function() client.send(data_string) end); if success then return true, method_name end; method_name = "client:Send()"; success, err_msg = pcall(function() client:Send(data_string) end); if success then return true, method_name end; method_name = "client.Send()"; success, err_msg = pcall(function() client.Send(data_string) end); if success then return true, method_name end; return false, err_msg 
end

-- send_ws_message function (FROM YOUR WORKING SCRIPT)
local function send_ws_message(data_table)
    if not (ws_client and (is_connected or data_table.type == "identity_report")) then if not (data_table.type == "identity_report" and ws_client) then return end end; local s_json, json_d = pcall(HttpService.JSONEncode, HttpService, data_table); if not s_json or not ws_client then if not s_json then warn("[LUA_WS] JSONEncode fail: " .. tostring(json_d)) end; if not ws_client then warn("[LUA_WS] WS client nil") end; return end; local sent, m_or_e = _try_send_message(ws_client, json_d); if not sent then warn("[LUA_WS] Send fail: " .. tostring(m_or_e)) end
end

-- send_identity_report function (FROM YOUR WORKING SCRIPT)
local function send_identity_report()
    if not Players.LocalPlayer then task.wait(1); if not Players.LocalPlayer then warn("[LUA_ID] LocalPlayer N/A"); return end end; local uid = Players.LocalPlayer.UserId; local uname = Players.LocalPlayer.Name; if uid and uname then send_ws_message({ type = "identity_report", userId = tostring(uid), userName = uname }) else warn("[LUA_ID] UID/UName missing") end
end

-- handle_server_message function (FROM YOUR WORKING SCRIPT, with job ID tracking for teleport scripts)
local function handle_server_message(message_string)
    local decoded_successfully, data_or_error = pcall(HttpService.JSONDecode, HttpService, message_string)
    if decoded_successfully then
        local data = data_or_error
        if data.type == "connected" then
            warn("[SNIPER_LUA_WS] Connected. InstanceID: " .. (data.instanceId or "N/A"))
            instanceIdFromServer = data.instanceId; is_connected = true
            if data.status == 'idle' or (not data.status and not (data.status == "active_cooldown" or data.status == "teleport_sent_awaiting_disconnect" or data.status == "teleport_initiated_awaiting_reconnect")) then
                send_ws_message({ type = "status_update", status = "idle" })
            end
        elseif data.type == "ping" then send_ws_message({ type = "pong" })
        elseif data.type == "error" and data.message == "Identity not established." then warn("[SNIPER_LUA_WS] Identity error. Resending."); send_identity_report()
        elseif data.type == "send_chat_to_roblox" and data.message then
            warn("[SNIPER_LUA_CHAT] Received command to send chat: ", data.message)
            local msgToSend = tostring(data.message); local msgSent = false
            if TextChatService then
                local tc=nil; if TextChatService:FindFirstChild("ChatInputBarConfiguration") then local ic=TextChatService.ChatInputBarConfiguration; tc=ic:GetAttribute("TargetTextChannel") or ic.TargetTextChannel end
                if tc and tc:IsA("TextChannel") then local s,e=pcall(function()tc:SendAsync(msgToSend)end); if s then msgSent=true;send_ws_message({type="feedback",status="success",message="Lua: Chat (InputBar)"})else send_ws_message({type="feedback",status="error",message="Lua:Fail InputBar:"..tostring(e)})end end
                if not msgSent then local chs=TextChatService:GetChildren();local pCh=nil;for _,ch in ipairs(chs)do if ch:IsA("TextChannel")and(string.lower(ch.Name)=="rbxsystem"or string.lower(ch.Name)=="all"or string.find(string.lower(ch.Name),"general"))then pCh=ch;break end end;if not pCh then for _,ch in ipairs(chs)do if ch:IsA("TextChannel")then pCh=ch;break end end end;if pCh then local s,e=pcall(function()pCh:SendAsync(msgToSend)end);if s then msgSent=true;send_ws_message({type="feedback",status="success",message="Lua:Chat(FallbackTCS)"})else send_ws_message({type="feedback",status="error",message="Lua:Fail FallbackTCS:"..tostring(e)})end else send_ws_message({type="feedback",status="error",message="Lua:No TextChannel"})end end
            end
            if not msgSent then local CS=game:GetService("Chat"); if CS and Players.LocalPlayer and Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Head")then local s,e=pcall(function()CS:Chat(Players.LocalPlayer.Character.Head,msgToSend,Enum.ChatColor.Blue)end);if s then msgSent=true;send_ws_message({type="feedback",status="success",message="Lua:Chat(Legacy)"})else send_ws_message({type="feedback",status="error",message="Lua:Fail Legacy:"..tostring(e)})end else if not msgSent then send_ws_message({type="feedback",status="error",message="Lua:All chat fail"})end end end
        else warn("[SNIPER_LUA_WS] Unknown JSON type: " .. (data.type or "nil")) end
    else
        warn("[SNIPER_LUA_WS] JSON decode failed. Assuming raw script: " .. message_string:sub(1,100) .. "...")
        if typeof(loadstring) == "function" then
            local func, err_load = loadstring(message_string)
            if func then
                -- ADDED: Try to extract JobID from the script string for TeleportInitFailed tracking
                local match_job_id = string.match(message_string, 'TeleportToPlaceInstance%s*%(%s*%d+%s*,%s*["%'](.-)["%']%s*%)')
                if match_job_id then
                    current_teleport_job_id = match_job_id
                    warn("[SNIPER_LUA_EXEC] Identified teleport script for JobID: " .. current_teleport_job_id)
                else
                    current_teleport_job_id = nil -- Reset if not a recognized teleport script
                end
                send_ws_message({ type = "status_update", status = "executing_script", jobId = current_teleport_job_id or "N/A" })
                local exec_success, err_exec = pcall(func)
                if not exec_success then
                    warn("[SNIPER_LUA_EXEC] Error executing script: " .. tostring(err_exec))
                    send_ws_message({ type = "feedback", status = "error", message = "Lua: Script exec error: " .. tostring(err_exec), jobId = current_teleport_job_id or "N/A"})
                    current_teleport_job_id = nil -- Reset on error
                else
                    warn("[SNIPER_LUA_EXEC] Script exec initiated (JobID: " .. (current_teleport_job_id or "N/A") .. ").")
                    if not current_teleport_job_id then send_ws_message({type="feedback",status="success",message="Lua: Non-teleport script exec."})end
                end
            else warn("[SNIPER_LUA_EXEC] loadstring compile fail: " .. tostring(err_load)); send_ws_message({type="feedback",status="error",message="Lua:loadstring compile err:"..tostring(err_load)}) end
        else warn("[SNIPER_LUA_EXEC] loadstring N/A"); send_ws_message({type="feedback",status="error",message="Lua:loadstring N/A"}) end
    end
end

-- ADDED: TeleportInitFailed Handler
local function onTeleportInitFailed(player, teleportResult, errorMessage, placeId, teleportOptions)
    warn(("[SNIPER_LUA_TP_FAIL] TeleportInitFailed. Player: %s, Result: %s, Error: %s, PlaceID: %s"):format(
        player.Name, tostring(teleportResult), tostring(errorMessage), tostring(placeId)
    ))
    local resultString = tostring(teleportResult); local errorCode = string.match(resultString, "%d+"); if errorCode then errorCode = tonumber(errorCode) end
    warn("[SNIPER_LUA_TP_FAIL] Parsed ErrorCode: " .. tostring(errorCode) .. " (from result: " .. resultString .. ")")

    if current_teleport_job_id then
        warn("[SNIPER_LUA_TP_FAIL] This failure is for JobID: " .. current_teleport_job_id)
        if errorCode == 772 then -- Error Code 772: Requested experience is full.
            warn("[SNIPER_LUA_TP_FAIL] Teleport failed because server is full (Error 772). Sending feedback.")
            send_ws_message({ type = "feedback", status = "teleport_failed_server_full", message = "Lua: Teleport failed - server full (Error 772).", jobId = current_teleport_job_id, errorCode = 772 })
        else
            warn("[SNIPER_LUA_TP_FAIL] Teleport failed for other reason. Sending generic failure feedback.")
            send_ws_message({ type = "feedback", status = "teleport_failed_other", message = "Lua: Teleport failed - " .. resultString .. " (" .. errorMessage .. ")", jobId = current_teleport_job_id, errorCode = errorCode or "Unknown" })
        end
        current_teleport_job_id = nil -- Reset after handling
    else
        warn("[SNIPER_LUA_TP_FAIL] TeleportInitFailed, but no current_teleport_job_id was being tracked.")
    end
    send_ws_message({ type = "status_update", status = "idle" }) -- Always set to idle after a teleport attempt (success or fail)
end
TeleportService.TeleportInitFailed:Connect(onTeleportInitFailed)
-- END ADDED

-- setup_chat_listeners function (FROM YOUR WORKING SCRIPT)
local function setup_chat_listeners()
    if TextChatService then
        warn("[SNIPER_LUA_CHAT_LISTEN] Setting up TextChatService.MessageReceived listener.")
        TextChatService.MessageReceived:Connect(function(textChatMessage)
            if not is_connected then return end
            local authorUserId = "System"; local authorDisplayName = "System"; local messageText = textChatMessage.Text
            local timestamp; if textChatMessage.Timestamp and typeof(textChatMessage.Timestamp) == "DateTime" then if textChatMessage.Timestamp.UnixTimestampMillis then timestamp = math.floor(textChatMessage.Timestamp.UnixTimestampMillis / 1000) elseif textChatMessage.Timestamp.UnixTimestamp then timestamp = textChatMessage.Timestamp.UnixTimestamp else timestamp = os.time() end else timestamp = os.time() end
            if textChatMessage.TextSource then authorUserId = tostring(textChatMessage.TextSource.UserId); local sourcePlayer = Players:GetPlayerByUserId(textChatMessage.TextSource.UserId)
                if sourcePlayer then authorDisplayName = sourcePlayer.DisplayName; if not authorDisplayName or authorDisplayName == "" then authorDisplayName = sourcePlayer.Name end
                else local tsName = "UnknownPlayer"; local s, nV = pcall(function() return textChatMessage.TextSource.Name end); if s and nV then tsName = nV end; authorDisplayName = tsName end
            end
            send_ws_message({type = "chat_message_from_client", authorUserId = authorUserId, authorDisplayName = authorDisplayName, message = messageText, timestamp = timestamp})
        end)
    else
        warn("[SNIPER_LUA_CHAT_LISTEN] TextChatService not found. Setting up legacy chat listeners.")
        local function handle_legacy_chat(player, message, eventType)
            if not is_connected then return end
            local payload = {type = "chat_message_from_client", authorUserId = tostring(player.UserId), authorDisplayName = player.Name, message = message, timestamp = os.time()}
            if player.DisplayName and player.DisplayName ~= "" then payload.authorDisplayName = player.DisplayName end
            send_ws_message(payload)
        end
        Players.PlayerAdded:Connect(function(player) player.Chatted:Connect(function(message) handle_legacy_chat(player, message, "PlayerAdded.Chatted") end) end)
        for _, player in ipairs(Players:GetPlayers()) do player.Chatted:Connect(function(message) handle_legacy_chat(player, message, "ExistingPlayer.Chatted") end) end
        if Players.LocalPlayer then local eC; eC = Players.LocalPlayer.Chatted:Connect(function(message) if not Players.LocalPlayer then if eC then eC:Disconnect() end return end handle_legacy_chat(Players.LocalPlayer, message, "LocalPlayer.Chatted") end) end
    end
end

-- connect_websocket function (FROM YOUR WORKING SCRIPT - it calls setup_chat_listeners)
local function connect_websocket()
    if connection_attempt_active then warn("[SNIPER_LUA_WS] Connection attempt already active. Skipping."); return end
    warn("[SNIPER_LUA_WS] Attempting to connect WebSocket..."); connection_attempt_active = true; is_connected = false
    if ws_client and ws_client.close then warn("[SNIPER_LUA_WS] Closing existing WebSocket client."); pcall(ws_client.close, ws_client) end; ws_client = nil
    local function _hMW(mD) local mC=mD; if type(mD)=="table" and mD.data then mC=mD.data end; if type(mC)=="string" then handle_server_message(mC) end end
    local function _hCW(c,r) warn(("[SNIPER_LUA_WS] WebSocket closed. Code: %s, Reason: %s. Reconnecting in %ss."):format(tostring(c),tostring(r),RECONNECT_DELAY)); is_connected=false;ws_client=nil;connection_attempt_active=false;task.wait(RECONNECT_DELAY);connect_websocket() end
    local function _hEW(e) warn(("[SNIPER_LUA_WS] WebSocket error: %s. Reconnecting in %ss."):format(tostring(e),RECONNECT_DELAY)); if is_connected then pcall(function() if ws_client and ws_client.close then ws_client:close() end end) end; is_connected=false;ws_client=nil;connection_attempt_active=false;task.wait(RECONNECT_DELAY);connect_websocket() end
    local exLibN="Unknown"; if syn and syn.websocket and syn.websocket.connect then exLibN="syn.websocket"; warn("[SNIPER_LUA_WS] Using "..exLibN); local cS,nC=pcall(function() return syn.websocket.connect(WEBSOCKET_SERVER_URL) end); if not cS or not nC then warn(("[SNIPER_LUA_WS] %s.connect failed: %s"):format(exLibN,tostring(nC)));connection_attempt_active=false;task.wait(RECONNECT_DELAY);connect_websocket();return end; ws_client=nC;ws_client.OnMessage:Connect(_hMW);ws_client.OnClose:Connect(_hCW);if ws_client.OnError then ws_client.OnError:Connect(_hEW) else warn("[SNIPER_LUA_WS] "..exLibN.." has no OnError event.") end; warn("[SNIPER_LUA_WS] "..exLibN.." events connected.");connection_attempt_active=false;send_identity_report();setup_chat_listeners()
    elseif WebSocket and WebSocket.connect then exLibN="WebSocket (generic)"; warn("[SNIPER_LUA_WS] Using "..exLibN); local sC,cOE=pcall(WebSocket.connect,WEBSOCKET_SERVER_URL); if not sC or not cOE then warn(("[SNIPER_LUA_WS] %s.connect failed: %s"):format(exLibN,tostring(cOE)));connection_attempt_active=false;task.wait(RECONNECT_DELAY);connect_websocket();return end; ws_client=cOE; local mEC={PascalEvent="OnMessage",snake_event="on_message",direct_on_event="onmessage",direct_on_underscore_event="on_message",emitter_event="message"}; local cEC={PascalEvent="OnClose",snake_event="on_close",direct_on_event="onclose",direct_on_underscore_event="on_close",emitter_event="close"}; local eEC={PascalEvent="OnError",snake_event="on_error",direct_on_event="onerror",direct_on_underscore_event="on_error",emitter_event="error"}; local aM,mM=_try_attach_event(ws_client,mEC,_hMW);if not aM then warn("[SNIPER_LUA_WS] "..exLibN..": No msg handler.") else warn("[SNIPER_LUA_WS] "..exLibN.." Msg: "..mM) end; local aC,cM=_try_attach_event(ws_client,cEC,_hCW);if not aC then warn("[SNIPER_LUA_WS] "..exLibN..": No close handler.") else warn("[SNIPER_LUA_WS] "..exLibN.." Close: "..cM) end; local aE,eM=_try_attach_event(ws_client,eEC,_hEW);if not aE then warn("[SNIPER_LUA_WS] "..exLibN..": No error handler.") else warn("[SNIPER_LUA_WS] "..exLibN.." Error: "..eM) end; warn("[SNIPER_LUA_WS] "..exLibN.." events attempted.");connection_attempt_active=false;if not(aM and aC)then warn("[SNIPER_LUA_WS] Critical "..exLibN.." handlers not attached. Reconnecting.");if ws_client.close then pcall(ws_client.close,ws_client)end;ws_client=nil;is_connected=false;task.wait(RECONNECT_DELAY);connect_websocket();return end;send_identity_report();setup_chat_listeners()
    else warn("[SNIPER_LUA_WS] No WebSocket library found. Cannot connect.");connection_attempt_active=false;return end
end

warn("[SNIPER_LUA_CORE] Script initiated. Attempting initial WebSocket connection.")
connect_websocket()

spawn(function()
    while task.wait(PING_INTERVAL) do
        if ws_client and is_connected and tick() - last_ping_sent > PING_INTERVAL - 2 then
            send_ws_message({type = "ping_from_client"})
            last_ping_sent = tick()
        elseif not is_connected and not connection_attempt_active and (syn and syn.websocket or WebSocket) then 
             warn("[SNIPER_LUA_PING_LOOP] Not connected and no active attempt. Re-initiating connection.")
             connect_websocket()
        end
    end
end)

warn("[SNIPER_LUA_CORE] Script main execution finished. Background tasks (WS, ping) are running.")
-- --- END OF ENTIRE MODIFIED Websocket-lua.txt ---
