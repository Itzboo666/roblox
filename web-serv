-- UNIVERSAL TELEPORT CLIENT (NO TeleportCompleted REQUIRED)
-- Works on Synapse, RōbloxX, all executors

local WS_URL = "wss://https://8260-2a00-23c7-148c-9801-d03a-c5e6-1859-6c03.ngrok-free.app/ws"
local COOLDOWN_FILE = "teleport_cooldown.txt"
local COOLDOWN = 8 * 60 -- 8 minutes in seconds
local TIMEOUT = 15 -- Seconds to wait for success confirmation

local TeleportService = game:GetService("TeleportService")
local os_time = os.time
local cooldown_end = 0
local active_job = nil
local last_attempt = 0

-- PERSISTENT STORAGE
local function save_cooldown()
    if writefile then
        writefile(COOLDOWN_FILE, tostring(cooldown_end))
    end
end

local function load_cooldown()
    if readfile and isfile(COOLDOWN_FILE) then
        return tonumber(readfile(COOLDOWN_FILE)) or 0
    end
    return 0
end

-- FAILURE HANDLER (WORKS EVERYWHERE)
TeleportService.TeleportInitFailed:Connect(function(_, result)
    if active_job then
        print("❌ FAILED:", result)
        active_job = nil
        if writefile and isfile(COOLDOWN_FILE) then
            delfile(COOLDOWN_FILE)
        end
    end
end)

-- SUCCESS DETECTION (FALLBACK METHOD)
local function check_success()
    wait(TIMEOUT)
    if active_job then
        print("✅ ASSUMING SUCCESS - Starting cooldown")
        cooldown_end = os_time() + COOLDOWN
        save_cooldown()
        active_job = nil
    end
end

-- WEBSOCKET HANDLER
local socket = (syn and syn.websocket or WebSocket).connect(WS_URL)
socket.OnMessage:Connect(function(job_id)
    local now = os_time()
    
    -- Cooldown check
    if now < cooldown_end then
        local remaining = cooldown_end - now
        print(("⏳ Cooldown: %d:%02d left"):format(
            math.floor(remaining/60), remaining%60))
        return
    end
    
    -- Rate limiting
    if now - last_attempt < 5 then
        print("⚠️ Too many attempts - wait 5s")
        return
    end
    
    active_job = job_id
    last_attempt = now
    
    -- Execute teleport
    local success, err = pcall(function()
        TeleportService:TeleportToPlaceInstance(game.PlaceId, job_id)
    end)
    
    if success then
        spawn(check_success) -- Start success timer
    else
        print("❌ TELEPORT ERROR:", err)
        active_job = nil
    end
end)

-- INITIALIZE
cooldown_end = load_cooldown()
while true do
    if os_time() >= cooldown_end and cooldown_end ~= 0 then
        print("✅ READY FOR NEW JOBS")
        cooldown_end = 0
        save_cooldown()
    end
    wait(10)
end
