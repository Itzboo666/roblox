-- REVISED TELEPORT CLIENT (FAIL-SAFE COOLDOWN)
local WS_URL = "wss://8260-2a00-23c7-148c-9801-d03a-c5e6-1859-6c03.ngrok-free.app/ws"
local COOLDOWN_FILE = "teleport_cooldown.txt"
local COOLDOWN_MINS = 8

-- SERVICES
local TeleportService = game:GetService("TeleportService")
local os_time = os.time
local task_wait = task.wait

-- STATE
local cooldown_end = 0
local active_job = nil

-- FILE OPERATIONS
local function save_cooldown()
    if writefile then
        writefile(COOLDOWN_FILE, tostring(cooldown_end))
    end
end

local function load_cooldown()
    if readfile and isfile(COOLDOWN_FILE) then
        return tonumber(readfile(COOLDOWN_FILE))
    end
    return 0
end

-- COOLDOWN HANDLERS
TeleportService.TeleportCompleted:Connect(function()
    if active_job then
        cooldown_end = os_time() + (COOLDOWN_MINS * 60)
        save_cooldown()
        print("✅ COOLDOWN STARTED")
        active_job = nil
    end
end)

TeleportService.TeleportInitFailed:Connect(function(_, result)
    warn("⚠️ FAILED: "..tostring(result))
    active_job = nil
    if writefile and isfile(COOLDOWN_FILE) then
        delfile(COOLDOWN_FILE)
    end
end)

-- WEBSOCKET HANDLER
local socket = (syn and syn.websocket or WebSocket).connect(WS_URL)
socket.OnMessage:Connect(function(job_id)
    if os_time() < cooldown_end then
        local remaining = math.floor((cooldown_end - os_time())/60)
        print(("⏸️ Skipping - %d minute cooldown"):format(remaining))
        return
    end
    
    active_job = job_id
    -- Your teleport logic here
end)

-- AUTO-UPDATER
cooldown_end = load_cooldown()
while true do
    if cooldown_end > 0 then
        local remaining = math.max(0, cooldown_end - os_time())
        print(("⏳ %d:%02d remaining"):format(
            math.floor(remaining/60), remaining%60))
    end
    task_wait(30)
end
