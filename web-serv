-- AUTO-EXEC TELEPORT CLIENT

-- CONFIGURATION: your ngrok tunnel WS URL
local WS_URL        = "wss://8260-2a00-23c7-148c-9801-d03a-c5e6-1859-6c03.ngrok-free.app/ws"
local COOLDOWN_SEC  = 8 * 60  -- 8 minutes

-- SERVICES
local Players         = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")
local os_time         = os.time
local task_wait       = task.wait

-- STATE
local lastTeleport = 0
local busy         = false
local currentJobId = nil
local cooldownEnd = 0  -- Track exact cooldown end time

-- EXECUTOR WS SUPPORT
local connect
if WebSocket and type(WebSocket.connect) == "function" then
    connect = WebSocket.connect
elseif WebSocketService and type(WebSocketService.ConnectAsync) == "function" then
    connect = function(url) return WebSocketService:ConnectAsync(url) end
else
    warn("[WebSocket] No supported API (WebSocket.connect or WSService:ConnectAsync).")
    return
end

-- CONNECT
local ok, socket = pcall(connect, WS_URL)
if not ok or not socket then
    warn("[WebSocket] Connection failed:", socket)
    return
end
print("[WebSocket] Connected to:", WS_URL)

-- TELEPORT COMPLETION HANDLER
TeleportService.TeleportCompleted:Connect(function()
    print("[Teleport] SUCCESS - Starting cooldown")
    lastTeleport = os_time()
    cooldownEnd = lastTeleport + COOLDOWN_SEC
    busy = false
    currentJobId = nil
    printCooldown()
end)

-- FAILURE HANDLER
TeleportService.TeleportInitFailed:Connect(function(player, result)
    if player == Players.LocalPlayer then
        warn("[Teleport] FAILED ("..tostring(result)..") - Resetting")
        busy = false
        currentJobId = nil
        printCooldown()
    end
end)

-- DEBUG TIMER
local function printCooldown()
    local remaining = cooldownEnd - os_time()
    if remaining > 0 then
        print(("[Cooldown] Next available in: %d:%02d"):format(
            math.floor(remaining/60), remaining%60))
    else
        print("[Cooldown] Ready to accept new jobs")
    end
end

-- COOLDOWN WATCHER
spawn(function()
    while true do
        task_wait(60)
        if os_time() < cooldownEnd then
            printCooldown()
        end
    end
end)

-- WATCHDOG
spawn(function()
    while true do
        task_wait(10)
        if busy and os_time() - lastTeleport > (COOLDOWN_SEC + 30) then
            warn("[Watchdog] Stuck teleport detected - Force reset")
            busy = false
            currentJobId = nil
            printCooldown()
        end
    end
end)

-- MESSAGE HANDLER
socket.OnMessage:Connect(function(msg)
    print("[WebSocket] Received job:", msg)
    local now = os_time()

    -- Message validation
    if type(msg) ~= "string" then
        warn("Invalid message type:", type(msg))
        return
    end

    -- Cooldown check
    if now < cooldownEnd then
        local remaining = cooldownEnd - now
        warn(("[Reject] Cooldown active: %d:%02d remaining"):format(
            math.floor(remaining/60), remaining%60))
        return
    end

    -- Job tracking
    if currentJobId == msg then
        print("[Reject] Already processing this job")
        return
    end

    -- Load validation
    local fn, err = loadstring(msg)
    if not fn then
        warn("[Reject] Load error:", err)
        return
    end

    -- Start teleport
    print("[Accept] Starting teleport process")
    busy = true
    currentJobId = msg
    lastTeleport = now
    
    local success, err = pcall(fn)
    if not success then
        warn("[Error] Teleport failed:", err)
        busy = false
        currentJobId = nil
        printCooldown()
    end
end)

-- CLOSE HANDLER
if socket.OnClose then
    socket.OnClose:Connect(function(code, reason)
        warn(("[WebSocket] Disconnected (%s): %s"):format(tostring(code), tostring(reason)))
    end)
end
