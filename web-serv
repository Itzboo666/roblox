-- CONFIGURATION
local WS_URL       = "wss://e600-2a00-23c7-148c-9801-7438-a7df-f885-bf66.ngrok-free.app/ws"
local COOLDOWN_SEC = 8 * 60  -- 8 minutes

-- SERVICES
local TeleportService = game:GetService("TeleportService")
local Players         = game:GetService("Players")
local localPlayer     = Players.LocalPlayer
local os_time         = os.time

-- STATE
local cooldownUntil = 0
local onCooldown    = false

-- Pick a connect function supported by Ronix
local connect
if WebSocket and type(WebSocket.connect) == "function" then
    connect = WebSocket.connect
elseif WebSocketService and type(WebSocketService.ConnectAsync) == "function" then
    connect = function(url) return WebSocketService:ConnectAsync(url) end
else
    error("No WebSocket API available in this executor")
end

-- Establish WebSocket
local ok, socket = pcall(connect, WS_URL)
if not ok or not socket then
    error("[WebSocket] Connection failed: " .. tostring(socket))
end
print("[WebSocket] Connected to server")

-- Reset cooldown on success or fullness
TeleportService.TeleportSucceeded:Connect(function()
    onCooldown = false
    print("[Teleport] Success — ready for next")
end)
TeleportService.TeleportInitFailed:Connect(function(player, result)
    if player == localPlayer and result == Enum.TeleportResult.GameFull then
        onCooldown = false
        cooldownUntil = 0
        print("[Teleport] Server full — ready for next")
    end
end)

-- Handle incoming commands
socket.OnMessage:Connect(function(msg)
    local now = os_time()
    if now < cooldownUntil or onCooldown then
        print("[Cooldown] Skipping—", math.max(0, cooldownUntil - now), "s left")
        return
    end

    local fn, err = loadstring(msg)
    if not fn then
        warn("[WebSocket] Invalid command:", err)
        return
    end

    -- Execute teleport
    print("[Teleport] Executing command")
    fn()

    -- Engage cooldown
    onCooldown    = true
    cooldownUntil = now + COOLDOWN_SEC
    print("[Cooldown] Engaged for", COOLDOWN_SEC, "seconds")
end)

-- Optional: log disconnects
if socket.OnClose then
    socket.OnClose:Connect(function(code, reason)
        warn("[WebSocket] Disconnected:", code, reason)
    end)
end
