-- CONFIG
local WS_URL = "wss://e600-2a00-23c7-148c-9801-7438-a7df-f885-bf66.ngrok-free.app/ws"
local COOLDOWN_TIME = 8 * 60 -- 8 minutes

-- SERVICES
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

-- STATE
local os_time = os.time
local lastTeleport = 0
local isTeleporting = false

-- WebSocket compatibility
local connectFn = (WebSocket and WebSocket.connect) or (WebSocketService and WebSocketService.ConnectAsync)
if not connectFn then
    warn("This executor doesn't support WebSocket.")
    return
end

-- Connect
local success, result = pcall(function()
    return connectFn(WS_URL)
end)
if not success or not result then
    warn("WebSocket connection failed:", result)
    return
end

local socket = result
print("[WebSocket] Connected.")

-- Handle teleport success/failure
TeleportService.TeleportSucceeded:Connect(function(_, _, jobId)
    isTeleporting = false
    print("[Teleport] Success to JobID:", jobId)
end)

TeleportService.TeleportInitFailed:Connect(function(player, result)
    if player == localPlayer and result == Enum.TeleportResult.GameFull then
        warn("[Teleport] Failed â€” Game Full. Cooldown cancelled.")
        lastTeleport = 0
        isTeleporting = false
    end
end)

-- Handle incoming commands
socket.OnMessage:Connect(function(command)
    local now = os_time()
    if isTeleporting then
        warn("[Cooldown] Currently teleporting.")
        return
    end

    if now - lastTeleport < COOLDOWN_TIME then
        warn(("[Cooldown] Active (%d seconds left)."):format(COOLDOWN_TIME - (now - lastTeleport)))
        return
    end

    local func, err = loadstring(command)
    if not func then
        warn("[WebSocket] Invalid command:", err)
        return
    end

    isTeleporting = true
    lastTeleport = now
    print("[Teleport] Executing command.")
    func()
end)

-- On WebSocket close
if socket.OnClose then
    socket.OnClose:Connect(function()
        warn("[WebSocket] Disconnected.")
    end)
end
