-- CONFIGURATION
local WS_URL        = "wss://e600-2a00-23c7-148c-9801-7438-a7df-f885-bf66.ngrok-free.app/ws"
local COOLDOWN_SEC  = 8 * 60  -- 8 minutes

-- SERVICES
local TeleportService = game:GetService("TeleportService")
local Players         = game:GetService("Players")
local localPlayer     = Players.LocalPlayer
local os_time         = os.time

-- STATE
local blockUntil = 0
local onCooldown = false

-- PICK THE RIGHT CONNECT FUNCTION
local connect
if WebSocket and type(WebSocket.connect) == "function" then
    connect = WebSocket.connect
elseif WebSocketService and type(WebSocketService.ConnectAsync) == "function" then
    connect = function(url) return WebSocketService:ConnectAsync(url) end
else
    error("No supported WebSocket API found in this executor.")
end

-- ESTABLISH WEBSOCKET CONNECTION
local ok, socket = pcall(connect, WS_URL)
if not ok or not socket then
    error("[WebSocket] Connection failed: " .. tostring(socket))
end
print("[WebSocket] Connected to:", WS_URL)

-- RESET COOLDOWN ON SUCCESS OR GAMEFULL
TeleportService.TeleportSucceeded:Connect(function()
    onCooldown = false
    print("[Teleport] Completed — ready for next")
end)
TeleportService.TeleportInitFailed:Connect(function(player, result)
    if player == localPlayer and result == Enum.TeleportResult.GameFull then
        onCooldown = false
        print("[Teleport] Server full — ready for next")
    end
end)

-- HANDLE INCOMING TELEPORT COMMANDS
socket.OnMessage:Connect(function(msg)
    local now = os_time()
    if onCooldown or now < blockUntil then
        print("[Cooldown] Skipping, time left:", blockUntil - now)
        return
    end

    -- Expect msg = 'game:GetService("TeleportService"):TeleportToPlaceInstance(...)'
    local fn, err = loadstring(msg)
    if not fn then
        warn("[WebSocket] Invalid command:", err)
        return
    end

    -- Execute & engage cooldown
    print("[Teleport] Executing:", msg)
    fn()
    onCooldown  = true
    blockUntil  = now + COOLDOWN_SEC
end)

-- HANDLE DISCONNECT (optional)
if socket.OnClose then
    socket.OnClose:Connect(function()
        warn("[WebSocket] Disconnected — restart script to reconnect")
    end)
end
